#define _CRT_SECURE_NO_WARNINGS
//#include<stdio.h>
//int main()
//{
//	int arr[10] = { 1, 2, 3, 4, 5 };  //不完全初始化，后面五个值默认为零
//	return 0;
//}

//int main()
//{
//	char arr[10] = {"a" , "b" ,"c"};//不完全初始化，后面的七个值默认为零
//	return 0;
//}

//int main()
//{
//	char arr[10] = "abc"; // 不完全初始化，因为c后面是\0 ，所以后面有一个\0加六个零，因为\0 = 0 ，所以后面有七个零
//
//	return 0;
//}


//sizeof 与 strlen 比较
//#include<stdio.h>
//#include<string.h>
//int main()
//{
//	char arr[] = "abc";
//	printf("%d\n" , sizeof(arr)) ;
//	printf("%d\n" , strlen(arr));
//	return 0;
//}
//#include<string.h>
//#include<stdio.h>
//int main()
//{
//	
//	int i = 0;
//	char arr[] = "abcdef";
//	int len = strlen(arr);
//	for (i = 0; i <=len; i++)
//		printf("%c\n", arr[i]);
//	return 0;
//}
////一维数组
//#include<stdio.h>
//int main()
//{
//	int arr[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
//	int sz = 0;
//	int i = 0;
//	sz = sizeof(arr) / sizeof(arr[0]);
//	for (i = 0; i <= sz; i++)
//	{
//		printf("&arr[%d] = %p\n" ,i , &arr[i]);  //结论：数组在内存中是连续存放的，低地址->高地址
//	}
//	return 0;
//}

////二维数组
//#include<stdio.h>
//int main()
//{
//	int arr[3][5] = { { 1, 2, 3, 4, 5 }, { 6, 7, 8, 9, 10 } };  //行可省，列不可省
//	int i = 0;
//	for (i = 0; i <2; i++)
//	{
//		int j = 0;
//		for (j = 0; j < 5; j++)
//		{
//			printf("%d", arr[i][j]);
//		}
//		printf("\n");
//	}
//	return 0;
//}
